// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/20/2024 20:59:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          register_file
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module register_file_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] A1;
reg [4:0] A2;
reg [4:0] A3;
reg [31:0] WD3;
reg WE3;
reg clk;
reg rst;
// wires                                               
wire [31:0] RD1;
wire [31:0] RD2;
wire [31:0] prode;

// assign statements (if any)                          
register_file i1 (
// port map - connection between master ports and signals/registers   
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.RD1(RD1),
	.RD2(RD2),
	.WD3(WD3),
	.WE3(WE3),
	.clk(clk),
	.prode(prode),
	.rst(rst)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #80000 1'b0;
	rst = #40000 1'b1;
	rst = #280000 1'b0;
	rst = #40000 1'b1;
	rst = #300000 1'b0;
	rst = #40000 1'b1;
end 
endmodule

